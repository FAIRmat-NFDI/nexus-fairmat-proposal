.. auto-generated by script ../../../../utils/nxdl2rst.py from the NXDL source NXapm_paraprobe_config_intersector.nxdl.xml

.. index::
    ! NXapm_paraprobe_config_intersector (application definition)
    ! apm_paraprobe_config_intersector (application definition)
    see: apm_paraprobe_config_intersector (application definition); NXapm_paraprobe_config_intersector

.. _NXapm_paraprobe_config_intersector:

==================================
NXapm_paraprobe_config_intersector
==================================

**Status**:

  application definition, extends :ref:`NXobject`

**Description**:

  Configuration of a paraprobe-intersector tool run in atom probe microscopy.

**Symbols**:

  The symbols used in the schema to specify e.g. dimensions of arrays.

  **n_elements**: How many elements to use for computing a composition.

**Groups cited**:
  :ref:`NXcollection`, :ref:`NXentry`, :ref:`NXprocess`

.. index:: NXentry (base class); used in application definition, NXprocess (base class); used in application definition, NXcollection (base class); used in application definition

**Structure**:

  .. _/NXapm_paraprobe_config_intersector/ENTRY-group:

  **ENTRY**: (required) :ref:`NXentry`


    .. _/NXapm_paraprobe_config_intersector/ENTRY@version-attribute:

    .. index:: version (group attribute)

    **@version**: (required) :ref:`NX_CHAR <NX_CHAR>`

      Version specifier of this application definition.

    .. _/NXapm_paraprobe_config_intersector/ENTRY/definition-field:

    .. index:: definition (field)

    **definition**: (required) :ref:`NX_CHAR <NX_CHAR>`

      Official NeXus NXDL schema with which this file was written.

      Obligatory value: ``NXapm_paraprobe_config_intersector``

    .. _/NXapm_paraprobe_config_intersector/ENTRY/program-field:

    .. index:: program (field)

    **program**: (required) :ref:`NX_CHAR <NX_CHAR>`

      Given name of the program/software/tool with which this NeXus
      (configuration) file was generated.

      .. _/NXapm_paraprobe_config_intersector/ENTRY/program@version-attribute:

      .. index:: version (field attribute)

      **@version**: (required) :ref:`NX_CHAR <NX_CHAR>`

        Ideally program version plus build number, or commit hash or description
        of ever persistent resources where the source code of the program and
        build instructions can be found so that the program can be configured
        ideally in such a manner that the result of this computational process
        is recreatable in the same deterministic manner.

    .. _/NXapm_paraprobe_config_intersector/ENTRY/analysis_identifier-field:

    .. index:: analysis_identifier (field)

    **analysis_identifier**: (optional) :ref:`NX_CHAR <NX_CHAR>`

      Ideally, a (globally persistent) unique identifier for referring
      to this analysis.

    .. _/NXapm_paraprobe_config_intersector/ENTRY/analysis_description-field:

    .. index:: analysis_description (field)

    **analysis_description**: (optional) :ref:`NX_CHAR <NX_CHAR>`

      Possibility for leaving a free-text description about this analysis.

    .. _/NXapm_paraprobe_config_intersector/ENTRY/time_stamp-field:

    .. index:: time_stamp (field)

    **time_stamp**: (required) :ref:`NX_DATE_TIME <NX_DATE_TIME>`

      ISO 8601 formatted time code with local time zone offset to
      UTC information included when this configuration file was created.

    .. _/NXapm_paraprobe_config_intersector/ENTRY/intersection_detection_method-field:

    .. index:: intersection_detection_method (field)

    **intersection_detection_method**: (required) :ref:`NX_CHAR <NX_CHAR>`

      Specifies the method to use which decides if two objects intersect.
      For reasons which are detailed in the supplementary material of
      `M. Kühbach et al. <https://arxiv.org/abs/2205.13510>`_, the tool by
      default assumes that two objects intersect if they share at least one
      ion with the same evaporation ID
      (shared_ion). Alternatively, with specifying tetrahedra_intersections,
      the tool can perform an intersection analysis which attempts to 
      tetrahedralize first each polyhedron. If successful, the tool then checks
      for at least one pair of intersecting tetrahedra to identify if two objects
      intersect or not.

      However, we found that these geometrical analyses can result in corner
      cases which the currently used library (TetGen) was not unable to
      tetrahedralize successfully. These cases were virtually always
      associated with complicated non-convex polyhedra
      which had portions of the mesh that were connected by almost point like
      tubes of triangles.

      Any of these values: ``shared_ion`` | ``tetrahedra_intersections``

    .. _/NXapm_paraprobe_config_intersector/ENTRY/has_object_volume-field:

    .. index:: has_object_volume (field)

    **has_object_volume**: (required) :ref:`NX_BOOLEAN <NX_BOOLEAN>`

      Specifies if the tool should load the volume of each object
      (if existent in the input file) to characterize the evolution of the
      objects' volume as a function of set identifier (e.g. time).

      This and the has_object_composition option enables to activate
      computations in the code which correlate the spatio-temporal tracking
      with an object's properties. This is useful to explore/understand how
      the object descriptor values evolve as a function of the parameterization
      of the object. To arrive at a detailed understanding and quantification
      of the differences of a given object as a function of delocalization and
      e.g. iso-surfacing settings.

      The point made in M. Kühbach et al. 2022, is that this functionality
      can be used to track for instance how the accumulated volume and
      composition of an object depends on its segmentation via iso-surfaces.
      The benefit of such computations is that users can inspect the
      parameter sensitivity of an objects representation rigorously.

    .. _/NXapm_paraprobe_config_intersector/ENTRY/has_object_composition-field:

    .. index:: has_object_composition (field)

    **has_object_composition**: (required) :ref:`NX_BOOLEAN <NX_BOOLEAN>`

      Specifies if the tool should load the composition of each object
      (if existent in the input file) to characterize the evolution of the
      object's composition as a function of set identifier. See the description
      of has_object_volume for further details. In M. Kühbach et al. 2022, both
      has_object options were used to characterize e.g. the parameter
      sensitivity of computed composition, volume, and shape specifically,
      for a carbide that was segmented via different carbon iso-composition
      values.

    .. _/NXapm_paraprobe_config_intersector/ENTRY/element_whitelist-field:

    .. index:: element_whitelist (field)

    **element_whitelist**: (required) :ref:`NX_UINT <NX_UINT>` (Rank: 1, Dimensions: [n_elements]) {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`}

      List of np.uint16 elements, via their proton number. The whitelist is
      evaluated to compute the composition of an object during tracking
      when has_object_composition is set to true.

    .. _/NXapm_paraprobe_config_intersector/ENTRY/number_of_processes-field:

    .. index:: number_of_processes (field)

    **number_of_processes**: (required) :ref:`NX_UINT <NX_UINT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`}

      For now a support field for the tool to identify how many individual
      analyses the tool should execute as part of the analysis.

    .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS-group:

    **PROCESS**: (required) :ref:`NXprocess`


      .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/number_of_tracking_sets-field:

      .. index:: number_of_tracking_sets (field)

      **number_of_tracking_sets**: (required) :ref:`NX_UINT <NX_UINT>` {units=\ :ref:`NX_UNITLESS <NX_UNITLESS>`}

        For now a support field for the tool to identify how many individual
        analyses (i. e. individual current_to_next mappings) the tool should
        perform as part of the high-throughput analysis.

      .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS-group:

      **PROCESS**: (required) :ref:`NXprocess`

        Tracking is the process of building logical relations between objects
        based on proximity and mesh intersections. For each time step pairs
        of sets are compared: members of a current_set and a next_set.
        Members have to be objects and eventually can in addition be so-called
        proxies. Objects and proxies are non-degenerated closed polyhedra which
        are not necessarily convex. Proxies are doppelganger/replacement
        meshes of objects which would otherwise be impossible to describe
        with a closed mesh.

        .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/add_proxies_to_objects-field:

        .. index:: add_proxies_to_objects (field)

        **add_proxies_to_objects**: (required) :ref:`NX_BOOLEAN <NX_BOOLEAN>`

          Specifies if, in the case of small finite datasets, objects which are
          located at the edge of the dataset should be accounted for or not.
          If these so-called proxy/doppelganger objects are accounted for, the
          respective groupname_proxy and dataset_proxy fields have to be
          filled to tell the tool where to load which proxy meshes from.

        .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/analyze_intersection-field:

        .. index:: analyze_intersection (field)

        **analyze_intersection**: (required) :ref:`NX_BOOLEAN <NX_BOOLEAN>`

          Specifies if the tool evaluates if for each pair the two objects
          (and proxies if used) intersect volumetrically.

        .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/analyze_proximity-field:

        .. index:: analyze_proximity (field)

        **analyze_proximity**: (required) :ref:`NX_BOOLEAN <NX_BOOLEAN>`

          Specifies if the tool evaluates if for each pair the two objects
          (and proxies if used) lie closer to one another than the
          threshold_proximity.

        .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/analyze_coprecipitation-field:

        .. index:: analyze_coprecipitation (field)

        **analyze_coprecipitation**: (required) :ref:`NX_BOOLEAN <NX_BOOLEAN>`

          Specifies if the tool evaluates, ones all tracking tasks were
          successfully completed, how intersecting or proximity related
          objects build sub-graphs. This is the feature which enabled
          M. Kühbach et al. 2022 the high-throughput analyses of how many
          objects are coprecipitates in the sense that they are single,
          duplet, triplet, or high-order. For these analyses to work
          has_object_volume needs to be activated.

        .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/threshold_proximity-field:

        .. index:: threshold_proximity (field)

        **threshold_proximity**: (required) :ref:`NX_FLOAT <NX_FLOAT>` {units=\ :ref:`NX_LENGTH <NX_LENGTH>`}

          The maximum Euclidean distance between two objects below which
          both objects are still considered within proximity.

        .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/has_current_to_next_links-field:

        .. index:: has_current_to_next_links (field)

        **has_current_to_next_links**: (required) :ref:`NX_BOOLEAN <NX_BOOLEAN>`

          Specifies if the tool stores the so-called forward relations between
          nodes representing members of the current_set to nodes representing
          members of the next_set.

        .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/has_next_to_current_links-field:

        .. index:: has_next_to_current_links (field)

        **has_next_to_current_links**: (required) :ref:`NX_BOOLEAN <NX_BOOLEAN>`

          Specifies if the tool stores the so-called backward relations between
          nodes representing members of the next_set to nodes representing
          members of the current_set.

        .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set-group:

        **current_set**: (required) :ref:`NXcollection`

          Current set stores a set of object geometries that should be checked
          for proximity and/or intersection with member of the next_set.

          .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/identifier-field:

          .. index:: identifier (field)

          **identifier**: (required) :ref:`NX_UINT <NX_UINT>` {units=\ :ref:`NX_ANY <NX_ANY>`}

            This identifier can be used to label the current set. The label
            effectively represents the time/iteration step when the current
            set was taken. As it is detailed in M. Kühbach et al. 2022,
            this identifier takes the role of the time variable k.

          .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/filename-field:

          .. index:: filename (field)

          **filename**: (required) :ref:`NX_CHAR <NX_CHAR>`

            Name of the HDF5 file which contain geometry (vertex coordinates,
            facet indices) and properties (ions, composition) of polyhedra
            (l objects) which should be included in the current set.
            The user has to ensure that the datasets under list_of_dataset_names
            (vertices, facet_indices, ions) exist and are formatted consistently.

            .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/filename@version-attribute:

            .. index:: version (field attribute)

            **@version**: (required) :ref:`NX_CHAR <NX_CHAR>`

              Version identifier of the file such as a secure hash which documents
              the binary state of the file to add an additional layer of
              reproducibility from which file specifically contains these data.

          .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/groupname_object_geometry_data-field:

          .. index:: groupname_object_geometry_data (field)

          **groupname_object_geometry_data**: (required) :ref:`NX_CHAR <NX_CHAR>`

            Paraprobe-intersector loads triangulated surface mesh data of a
            set of objects. For each object its mesh is expected to have
            three-dimensional position data of the unique vertices and a
            matrix of vertex indices which describe the faces.
            As each object has to be a polyhedron/closed surface mesh, this
            matrix has as many rows as faces, i.e. triangles and three columns.
            Vertex indices have to start at zero.

          .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/groupname_object_supplementary_data-field:

          .. index:: groupname_object_supplementary_data (field)

          **groupname_object_supplementary_data**: (required) :ref:`NX_CHAR <NX_CHAR>`

            The default intersection detection method uses shared ions.
            Therefore, it is necessary to specify where the results from the
            paraprobe-nanochem tool run are located which document which ions
            (with their evaporation IDs) are inside or on the surface of each
            object. This field points the tool to these evaporation IDs.

          .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/groupname_object_property_data-field:

          .. index:: groupname_object_property_data (field)

          **groupname_object_property_data**: (required) :ref:`NX_CHAR <NX_CHAR>`

            In order to correlate object properties like volume and composition
            with tracking data, it is necessary to specify where the results
            (object properties) from the paraprobe-nanochem tool run are located.
            This field instructs the tool where to load these object property data
            from.

          .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/dataset_object_identifier-field:

          .. index:: dataset_object_identifier (field)

          **dataset_object_identifier**: (required) :ref:`NX_CHAR <NX_CHAR>`

            Paraprobe-intersector does not just compare two objects but a set
            of sets of objects. This field instructs the tool where to load
            the identifiers (names) of each object in a current_set or next_set
            respectively from.

          .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/groupname_proxy_geometry_data-field:

          .. index:: groupname_proxy_geometry_data (field)

          **groupname_proxy_geometry_data**: (optional) :ref:`NX_CHAR <NX_CHAR>`

            Like groupname_object_geometry_data but for the proxies.
            Triangulated surface meshes of proxies have to be formatted
            in the same manner as objects.

          .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/groupname_proxy_interior_supplementary_data-field:

          .. index:: groupname_proxy_interior_supplementary_data (field)

          **groupname_proxy_interior_supplementary_data**: (optional) :ref:`NX_CHAR <NX_CHAR>`

            Like groupname_proxy_supplementary_data but for the interior proxies.
            Leave an empty string if proxies should not be used.

          .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/groupname_proxy_exterior_supplementary_data-field:

          .. index:: groupname_proxy_exterior_supplementary_data (field)

          **groupname_proxy_exterior_supplementary_data**: (optional) :ref:`NX_CHAR <NX_CHAR>`

            Like groupname_proxy_supplementary_data but for the exterior proxies.
            Leave an empty string if proxies should not be used.

        .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set-group:

        **next_set**: (required) :ref:`NXcollection`

          Next set stores a set of object geometries that should be checked
          for proximity and/or intersection with (each) member(s) of the
          current_set.

          .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/identifier-field:

          .. index:: identifier (field)

          **identifier**: (required) :ref:`NX_UINT <NX_UINT>` {units=\ :ref:`NX_ANY <NX_ANY>`}

            This identifier can be used to label the next set. Like for the current_set
            the identifier is effectively the time/iteration step when the next set was taken.
            As it is detailed in M. Kühbach et al. 2022, this identifier
            takes the role of the time variable k+1.

          .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/filename-field:

          .. index:: filename (field)

          **filename**: (required) :ref:`NX_CHAR <NX_CHAR>`

            Name of the HDF5 file which contain geometry (vertex coordinates,
            facet indices) and properties (ions, composition) of
            polyhedra(l objects) which should be included in the current set.
            The user has to ensure that the datasets that are referred to
            under list_of_dataset_names (vertices, facet_indices, ions).

            .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/filename@version-attribute:

            .. index:: version (field attribute)

            **@version**: (required) :ref:`NX_CHAR <NX_CHAR>`

              Version identifier of the file such as a secure hash which documents
              the binary state of the file to add an additional layer of
              reproducibility from which file specifically contains these data.

          .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/groupname_object_geometry_data-field:

          .. index:: groupname_object_geometry_data (field)

          **groupname_object_geometry_data**: (required) :ref:`NX_CHAR <NX_CHAR>`

            Paraprobe-intersector loads triangulated surface mesh data of a
            set of objects. For each object its mesh is expected to have
            three-dimensional position data of the unique vertices and a
            matrix of vertex indices which describe the faces.
            As each object has to be a polyhedron/closed surface mesh
            this matrix has as many rows as faces, i.e. triangles and
            three columns. Vertex indices have to start at zero.

          .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/groupname_object_supplementary_data-field:

          .. index:: groupname_object_supplementary_data (field)

          **groupname_object_supplementary_data**: (required) :ref:`NX_CHAR <NX_CHAR>`

            The default intersection detection method uses shared ions.
            Therefore, it is necessary to specify where the results from the
            paraprobe-nanochem tool run are located which document which ions
            (with their identifiers) are inside or on the surface of each object.
            This field instructs the tool where to load these
            ion evaporation ids from.

          .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/groupname_object_property_data-field:

          .. index:: groupname_object_property_data (field)

          **groupname_object_property_data**: (required) :ref:`NX_CHAR <NX_CHAR>`

            In order to correlate object properties like volume and composition
            with tracking data, it is necessary to specify where the results
            (object properties) from the paraprobe-nanochem tool run are located.
            This field instructs the tool where to load these object property
            data from.

          .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/dataset_object_identifier-field:

          .. index:: dataset_object_identifier (field)

          **dataset_object_identifier**: (required) :ref:`NX_CHAR <NX_CHAR>`

            Paraprobe-intersector does not just compare two objects but a set
            of sets of objects. This field instructs the tool where to load
            the identifiers (names) of each object in a current or next set
            respectively from.

          .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/groupname_proxy_geometry_data-field:

          .. index:: groupname_proxy_geometry_data (field)

          **groupname_proxy_geometry_data**: (optional) :ref:`NX_CHAR <NX_CHAR>`

            Like groupname_object_geometry_data but for the proxies.
            Triangulated surface meshes of proxies have to be formatted
            in the same manner. Leave an empty string if proxies should not
            be used.

          .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/groupname_proxy_interior_supplementary_data-field:

          .. index:: groupname_proxy_interior_supplementary_data (field)

          **groupname_proxy_interior_supplementary_data**: (optional) :ref:`NX_CHAR <NX_CHAR>`

            Like groupname_proxy_supplementary_data but for the interior proxies.
            Leave an empty string if proxies should not be used.

          .. _/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/groupname_proxy_exterior_supplementary_data-field:

          .. index:: groupname_proxy_exterior_supplementary_data (field)

          **groupname_proxy_exterior_supplementary_data**: (optional) :ref:`NX_CHAR <NX_CHAR>`

            Like groupname_proxy_supplementary_data but for the exterior proxies.
            Leave an empty string if proxies should not be used.


Hypertext Anchors
-----------------

List of hypertext anchors for all groups, fields,
attributes, and links defined in this class.


* :ref:`/NXapm_paraprobe_config_intersector/ENTRY-group </NXapm_paraprobe_config_intersector/ENTRY-group>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/analysis_description-field </NXapm_paraprobe_config_intersector/ENTRY/analysis_description-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/analysis_identifier-field </NXapm_paraprobe_config_intersector/ENTRY/analysis_identifier-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/definition-field </NXapm_paraprobe_config_intersector/ENTRY/definition-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/element_whitelist-field </NXapm_paraprobe_config_intersector/ENTRY/element_whitelist-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/has_object_composition-field </NXapm_paraprobe_config_intersector/ENTRY/has_object_composition-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/has_object_volume-field </NXapm_paraprobe_config_intersector/ENTRY/has_object_volume-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/intersection_detection_method-field </NXapm_paraprobe_config_intersector/ENTRY/intersection_detection_method-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/number_of_processes-field </NXapm_paraprobe_config_intersector/ENTRY/number_of_processes-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS-group </NXapm_paraprobe_config_intersector/ENTRY/PROCESS-group>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/number_of_tracking_sets-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/number_of_tracking_sets-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS-group </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS-group>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/add_proxies_to_objects-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/add_proxies_to_objects-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/analyze_coprecipitation-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/analyze_coprecipitation-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/analyze_intersection-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/analyze_intersection-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/analyze_proximity-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/analyze_proximity-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set-group </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set-group>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/dataset_object_identifier-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/dataset_object_identifier-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/filename-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/filename-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/filename@version-attribute </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/filename@version-attribute>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/groupname_object_geometry_data-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/groupname_object_geometry_data-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/groupname_object_property_data-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/groupname_object_property_data-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/groupname_object_supplementary_data-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/groupname_object_supplementary_data-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/groupname_proxy_exterior_supplementary_data-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/groupname_proxy_exterior_supplementary_data-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/groupname_proxy_geometry_data-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/groupname_proxy_geometry_data-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/groupname_proxy_interior_supplementary_data-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/groupname_proxy_interior_supplementary_data-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/identifier-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/current_set/identifier-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/has_current_to_next_links-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/has_current_to_next_links-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/has_next_to_current_links-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/has_next_to_current_links-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set-group </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set-group>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/dataset_object_identifier-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/dataset_object_identifier-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/filename-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/filename-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/filename@version-attribute </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/filename@version-attribute>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/groupname_object_geometry_data-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/groupname_object_geometry_data-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/groupname_object_property_data-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/groupname_object_property_data-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/groupname_object_supplementary_data-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/groupname_object_supplementary_data-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/groupname_proxy_exterior_supplementary_data-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/groupname_proxy_exterior_supplementary_data-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/groupname_proxy_geometry_data-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/groupname_proxy_geometry_data-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/groupname_proxy_interior_supplementary_data-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/groupname_proxy_interior_supplementary_data-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/identifier-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/next_set/identifier-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/threshold_proximity-field </NXapm_paraprobe_config_intersector/ENTRY/PROCESS/PROCESS/threshold_proximity-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/program-field </NXapm_paraprobe_config_intersector/ENTRY/program-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/program@version-attribute </NXapm_paraprobe_config_intersector/ENTRY/program@version-attribute>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY/time_stamp-field </NXapm_paraprobe_config_intersector/ENTRY/time_stamp-field>`
* :ref:`/NXapm_paraprobe_config_intersector/ENTRY@version-attribute </NXapm_paraprobe_config_intersector/ENTRY@version-attribute>`

**NXDL Source**:
  https://github.com/nexusformat/definitions/blob/main/applications/NXapm_paraprobe_config_intersector.nxdl.xml
